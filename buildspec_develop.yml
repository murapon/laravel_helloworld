version: 0.2
env:
  variables:
    AWS_DEFAULT_REGION: ap-northeast-1
    DEFAULT_IMAGE_REPO_NAME: murao_test
    DEFAULT_SOURCE_BRANCH: develop
    DEFAULT_BUILD_TARGET: develop
    APP_NAME: laravel_helloworld

phases:
  install:
    runtime-versions:
      php: 8.0
    commands:
      - echo Install started on `date`
      - docker -v
      - aws --version
      - yum -y install jq
  pre_build:
    commands:
      - echo Entered the pre_build phase...
      - IMAGE_REPO_NAME=${IMAGE_REPO_NAME:-$DEFAULT_IMAGE_REPO_NAME}
      - SOURCE_BRANCH=${SOURCE_BRANCH:-$DEFAULT_SOURCE_BRANCH}
      - BUILD_TARGET=${BUILD_TARGET:-$DEFAULT_BUILD_TARGET}
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - CONTAINER_NAME=laravel_helloworld-container

      - echo ECR Login
      - $(aws ecr get-login --no-include-email --region ap-northeast-1)

      - cp src/.env.aws src/.env

  build:
    commands:
      - echo "Building... "
      - pwd && ls -l
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$SOURCE_BRANCH
      - |
        if [ $BUILD = "1" ]; then
          docker-compose run --rm app composer install --no-progress --no-suggest --no-dev
          echo '> ' docker build --target $BUILD_TARGET -t $REPOSITORY_URI -f ./docker/app/Dockerfile .
          docker build --target $BUILD_TARGET -t $REPOSITORY_URI -f ./docker/app/Dockerfile .
        else
          echo "NO_BUILD for prod"
          echo "pull image"
          STAGING_REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$STAGING_REPO_NAME:$SOURCE_BRANCH-$COMMIT_HASH
          docker pull $STAGING_REPOSITORY_URI
        fi

  post_build:
    commands:
      - echo "Post-Building... "
      - REPOSITORY_TAGGING=$REPOSITORY_URI-$COMMIT_HASH
      - echo "- Pushing to ECR... "
      - |
        if [ $BUILD = "1" ]; then
          echo '> ' docker tag $REPOSITORY_URI $REPOSITORY_TAGGING
          docker tag $REPOSITORY_URI $REPOSITORY_TAGGING
        else
          echo "PUSH for prod"
          docker tag $STAGING_REPOSITORY_URI $REPOSITORY_URI
          docker tag $STAGING_REPOSITORY_URI $REPOSITORY_TAGGING
        fi
      - echo '> ' docker push $REPOSITORY_URI
      - docker push $REPOSITORY_URI
      - echo '> ' docker push $REPOSITORY_TAGGING
      - docker push $REPOSITORY_TAGGING


      - echo Writing task definition file...
      - TASK_DEFINITION=$(aws ecs describe-services --services ${ECS_SERVICE} --cluster ${ECS_CLUSTER} --region ${AWS_DEFAULT_REGION} --query "services[0].taskDefinition" --output text)
      - echo "s|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:[^\"]*|$REPOSITORY_TAGGING|g"
      - echo `aws ecs describe-task-definition --task-definition $TASK_DEFINITION --output json` | sed -e "s|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:[^\"]*|$REPOSITORY_TAGGING|g" | jq -r .taskDefinition > taskdef.json
      - cat taskdef.json | grep image
      - echo Writing appspec file...
      - cp ./cicd/appspec.yml appspec.yml
      - sed -i -e "s/<CONTAINER_NAME>/$CONTAINER_NAME/g" appspec.yml
      - cat appspec.yml
artifacts:
  files:
    - taskdef.json
    - appspec.yml
